<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | GraemeF.com]]></title>
  <link href="http://graemef.com/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://graemef.com/"/>
  <updated>2013-04-30T22:12:10+01:00</updated>
  <id>http://graemef.com/</id>
  <author>
    <name><![CDATA[Graeme Foster]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Framework switcheroo]]></title>
    <link href="http://graemef.com/blog/2011/02/17/Framework-switcheroo/"/>
    <updated>2011-02-17T04:39:00+00:00</updated>
    <id>http://graemef.com/blog/2011/02/17/Framework-switcheroo</id>
    <content type="html"><![CDATA[<p>Following on from my <a href="http://graemef.com/42600017">mocking framework comparison</a>, I changed
<a href="https://github.com/GraemeF/Twiddler">Twiddler</a> (my pet Twitter client
project) from <a href="http://moq.me">Moq</a> to
<a href="http://nsubstitute.github.com/">NSubstitute</a>, and from
<a href="http://xunit.codeplex.com/">xUnit.net</a>'s built-in Asserts to
<a href="http://should.codeplex.com/">Should.Fluent</a>, and I think both changes
greatly improved readability of my tests.</p>

<p>Full diffs are here for comparison:</p>

<ul>
<li><a href="https://github.com/GraemeF/Twiddler/commit/6527ef85f36bef51b3db96c94b648148b39fb697">Moq → NSubstitute</a></li>
<li><a href="https://github.com/GraemeF/Twiddler/commit/d34993a656c2655ff690eaacb57b81e490861b84">xUnit.net Assert → Should.Fluent</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A quick comparison of some .NET mocking frameworks]]></title>
    <link href="http://graemef.com/blog/2011/02/10/A-quick-comparison-of-some-.NET-mocking-frameworks/"/>
    <updated>2011-02-10T07:01:00+00:00</updated>
    <id>http://graemef.com/blog/2011/02/10/A-quick-comparison-of-some-.NET-mocking-frameworks</id>
    <content type="html"><![CDATA[<p>What's the collective noun for mocking frameworks? If there is one, then
.NET has it!</p>

<p>I've used Moq for years but I'm always keen to make my tests more
readable, so I thought it was time to compare some of the modern
alternatives and see how they perform in a test fixture plucked almost
at random from a project I recently worked on. So, here are the same
tests using fakes from <a href="http://moq.me">Moq</a>,
<a href="http://nsubstitute.github.com/">NSubstitute</a> and
<a href="http://code.google.com/p/fakeiteasy/">FakeItEasy</a>, all of which are
available from the <a href="http://nuget.org/">NuGet</a> gallery. If there's
another hot framework you think compares well then let me know and I'll
try it out too.</p>

<p><strong>Disclaimer</strong>: I'm quite familar with Moq but this is my first time
with NSubstitute and FakeItEasy, so I'm not necesarily using the best
option for these frameworks. If you spot something that would be better
done in another way, fork the Gist on GitHub and let me know!</p>

<h2>Setup</h2>

<p>I use <a href="http://xunit.codeplex.com/">xUnit.net</a> which works slightly
differently to most of the other test frameworks: it creates a new
instance of your test fixture class for each test, which allows you to
use field initializers and a constructor to set up your fakes. I take
advantage of this in the following snippets.</p>

<h3>Moq</h3>

<p>Most of the time we can use a LINQ query to set up a fake with Moq. This
leads to nice and clean test set up as it can be done from a field
initializer if you have setup that applies to all the tests in the
fixture:</p>

<p><div><script src='https://gist.github.com/820677.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Quite succinct, no constructor needed, but a little bit ugly.</p>

<h3>NSubstitute</h3>

<p>The instantiation of the fakes is very similar to Moq, but there is no
equivalent to the LINQ setup so we need a constructor:</p>

<p><div><script src='https://gist.github.com/820679.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>I find this very readable, and it's probably easier to understand than
the LINQ setup.</p>

<h3>FakeItEasy</h3>

<p>Slightly different take on instantiation, and again the setup needs to
be done in a constructor:</p>

<p><div><script src='https://gist.github.com/820697.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>The setup reads well, but is verbose when compared to NSubstitute.</p>

<h2>Verification</h2>

<p>In the following snippets we have a field referencing the fake object,
and we want to verify that a method was called on it.</p>

<h3>Moq</h3>

<p>We get the <code>Mock</code> for the fake object and verify:</p>

<p><div><script src='https://gist.github.com/820728.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Getting the <code>Mock</code> degrades readability a bit, but not bad.</p>

<h3>NSubstitute</h3>

<p><div><script src='https://gist.github.com/820753.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Wow. Couldn't really be any shorter, could it? My only criticism is that
it doesn't scream "ASSERTION!!!" to me.</p>

<h3>FakeItEasy</h3>

<p><div><script src='https://gist.github.com/820737.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>I like the way the fake is incorporated into the the call, it's much
less intrusive than Moq. Ending with <code>MustHaveHappened</code> makes a pretty
clear statement that verification is happening here.</p>

<h2>Raising an event</h2>

<p>In this test I want to check that the presenter raises its
<code>PropertyChanged</code> event when the model's <code>PropertyChanged</code> event is
raised. I'm making use of a <a href="https://caliburn.svn.codeplex.com/svn/trunk/src/Caliburn.Testability/Extensions/PropertyAssertionExtensions.cs">handy extension method from
Caliburn.Testability</a>
that lets me write
<code>AssertThatChangeNotificationIsRaisedBy([property]).When([something happens])</code>.
In this case <em><code>[something happens]</code></em> is going to be the
<code>PropertyChanged</code> event being raised on the model, and we're going to
see how that is done with the different mocking frameworks.</p>

<p>In the interests of staying DRY, I usually make an extension method of
my own to raise <code>PropertyChanged</code>, but I won't here so we can see how
the frameworks work!</p>

<h3>Moq</h3>

<p>Again we have to get the <code>Mock</code>, then we call <code>Raise</code> on it:</p>

<p><div><script src='https://gist.github.com/820766.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Still not keen on getting the <code>Mock</code>, and it's a shame we have to write
<code>+= null</code> just to make a valid expression. Bit long and nasty.</p>

<h3>NSubstitute</h3>

<p><div><script src='https://gist.github.com/820791.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So close to being very nice, but spoiled by having to supply the generic
argument to <code>Raise</code>. This <a href="http://nsubstitute.github.com/help/raising-events/">isn't always the case</a>, but as the
<code>PropertyChanged</code> event is declared with a delegate it's necessary here.
Still, it reads fairly well, certainly better than having <code>+= null</code> in
the middle.</p>

<h3>FakeItEasy</h3>

<p><div><script src='https://gist.github.com/820810.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>A lot shorter than NSubstitute and more readable than Moq, I think
that's quite good. Although at first glance the <code>Now</code> on the end seems a
bit odd.</p>

<h2>Conclusion</h2>

<p>Each of these frameworks has a lot more to offer than I've touched on
here, covering just about anything you could do to an object (and
probably a few things you wouldn't want to!). I wanted to see what the
basic, everyday scenarios look like as those are the ones that really
matter to me, and after this I will definitely try NSubstitute out on a
real project.</p>

<p>It's amazing how far mocking frameworks have come in the last couple of
years!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't jump the red light!]]></title>
    <link href="http://graemef.com/blog/2010/02/15/Dont-jump-the-red-light/"/>
    <updated>2010-02-15T20:29:00+00:00</updated>
    <id>http://graemef.com/blog/2010/02/15/Dont-jump-the-red-light</id>
    <content type="html"><![CDATA[<p>There’s a good reason why the <a href="http://en.wikipedia.org/wiki/Test-driven_development">test-driven development cycle</a> says you
should always watch a test fail before you write the production code
that makes it pass. I was taught a lesson in this today, “school of hard
knocks” style…</p>

<h3>How did it happen?</h3>

<p>I have a simple class which implements <code>INotifyPropertyChanged</code> and has
property:</p>

<pre><code>public class MyClass : INotifyPropertyChanged
{
    private string _name;

    public string Name
    {
        get { return _name; }
        set
        {
            _name = value;
            PropertyChanged(this, new PropertyChangedEventArgs("Name"));
        }
    }

    public event PropertyChangedEventHandler PropertyChanged = delegate { };
}
</code></pre>

<p>To test that the PropertyChanged event is raised at the appropriate time
I use <a href="http://www.codeplex.com/caliburn">Caliburn</a>’s handy (and very
readable) <code>PropertyHasChangedAssertion</code>:</p>

<pre><code>[TestFixture]
public class MyClassTestFixture
{
    [Test]
    public void Name_WhenSet_RaisesPropertyChanged()
    {
        var test = new MyClass();

        test.AssertThatChangeNotificationIsRaisedBy(x =&gt; x.Name);
    }
}
</code></pre>

<p>At the time I obviously thought this was too simple to worry about, saw
the test passed as expected and moved on. All good… Or so it seemed!
Fast forward a week or two. I started to get some strange errors – not
test failures - in my MSBuild output:</p>

<blockquote><p>error : Internal error: An unhandled exception occurred.
error : System.Exception: No context was provided to test the notification, use When(Action affectProperty) to provide a context.
error :    at Caliburn.Testability.Assertions.PropertyHasChangedAssertion`2.Finalize()</p></blockquote>

<p>Not only is the message a bit cryptic without any context (e.g. a test)
but the error was intermittent. Oh joy! After a bit of detective work
(more than you might think!) I realised that this is because the
Caliburn’s <code>PropertyHasChangedAssertion</code> checks that you called its
<code>When(Action affectProperty)</code> method in its finalizer:</p>

<pre><code>~PropertyHasChangedAssertion()
{
    if(!_isValidAssertion)
        throw new Exception(
            "No context was provided to test the notification, use When(Action affectProperty) to provide a context.");
}
</code></pre>

<p>While this makes the test extremely readable (which is, of course,
extremely important), if you forget to call <code>When()</code>, if and when you
get an error is up to the non-deterministic finalization gods. An easy
one to fix:</p>

<pre><code>[Test]
public void Name_WhenSet_RaisesPropertyChanged()
{
    var test = new MyClass();

    test.AssertThatChangeNotificationIsRaisedBy(x =&gt; x.Name)
        .When(() =&gt; test.Name = "New name");
}
</code></pre>

<p>But I didn’t get the feedback that I should have done from doing TDD
properly, and wasted time as a result.</p>

<h3>What went wrong?</h3>

<p>Here is how TDD is <em>supposed</em> to be performed:</p>

<p><img src="http://bitbybitblog.com/wp-content/uploads/2011/12/tdd_cycle.jpg" alt="TDD cycle" /></p>

<p>Because the code was trivial, I skipped the second step and didn’t check
that the test failed before I carried on and implemented the property.
If I hadn’t skipped this step, there’s a good chance that the following
sequence of events would have occurred:</p>

<ol>
<li>I write the test, and add an empty property definition to make it
compile</li>
<li>I run the test and <em>see that it unexpectedly passes</em></li>
<li>I scratch my head for a bit, but I’m already looking at the
offending line of code so it’s much easier to spot the problem</li>
<li>The penny drops, I spot the mistake and fix it</li>
<li>I run the test again, and this time it fails. Happy days.</li>
<li>I implement the property changed notification and carry on</li>
</ol>


<p>Maybe I would have got the error when I ran the test, and that would
have given me another clue about the cause of the problem.</p>

<h3>It could have been worse!</h3>

<p>In the week or two since I made the mistake I could have carried on to
use <code>AssertThatChangeNotificationIsRaisedBy</code> in tens or hundreds of
other tests, which would have made it much harder to find the one with
the missing <code>When()</code> call. I was lucky that there were only a few uses
in my tests.</p>

<h3>A lesson learned?</h3>

<p>I hope so! When time is short it can be hard to make yourself go through
these steps over and over again, but they are all there for a reason –
<em>to stop us writing code that doesn’t do what we think it does</em>. I will
be trying especially hard to stick to the steps, but we’ll have to wait
and see how it goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I'm Growing Object-Oriented Software, Guided By Tests]]></title>
    <link href="http://graemef.com/blog/2010/02/08/How-Im-Growing-Object-Oriented-Software-Guided-By-Tests/"/>
    <updated>2010-02-08T20:22:00+00:00</updated>
    <id>http://graemef.com/blog/2010/02/08/How-Im-Growing-Object-Oriented-Software-Guided-By-Tests</id>
    <content type="html"><![CDATA[<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software, Guided by Tests</a>
by <a href="http://www.m3p.co.uk/">Steve Freeman</a> and <a href="http://www.natpryce.com/">Nat Pryce</a> is a book about test-driven
development. Here are a few notes on my experiences of following its
methods.</p>

<h3>The Story So Far</h3>

<p>I was fortunate enough to start work on a new desktop application in the
middle of last year, around the time I read through the freely-available
online version of the book before it was finally published in November.
This was an ideal opportunity to put TDD into practice so I started by
building a “walking skeleton” using
<a href="http://www.codeplex.com/CompositeWPF">Prism</a>,
<a href="http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET">CruiseControl.NET</a>,
<a href="http://wix.sourceforge.net/">WiX</a>, <a href="http://www.gallio.org/">Gallio</a>,
<a href="http://www.mbunit.com/">MbUnit</a>, <a href="http://www.ncover.com/">NCover</a> and
<a href="http://white.codeplex.com/">White</a> as a wrapper around <a href="http://msdn.microsoft.com/en-us/library/ms747327.aspx">UI
Automation</a> for
the acceptance tests, and took it from there. I’ll admit that there was
a slow start (WPF/Prism and White/UI Automation were new to me too) but
development speed has been steadily increasing ever since, and now I’m
able to get what feels like a lot done each day. And that’s pretty much
<em>every</em> day; it’s been a long time since I’ve had to halt progress for a
significant amount of time in order to squash a bug or redo a chunk of
work.</p>

<h3>Where am I now?</h3>

<p>I’m still learning. It’s easy to slip back into changing code then
updating the tests to match, and I do find myself doing that sometimes.
I’m also finding it hard to perform only one refactoring step at a time
(oh, let me just rename that class while I’m here…), and the acceptance
tests can be brittle and sometimes feel like a burden to write. But what
doesn’t kill you makes you stronger, right? It’s getting noticeably
easier as I learn and improve, and every bit of pain along the way has
been worth it.</p>

<h3>Does it work?</h3>

<p>For me, <strong>yes</strong>. Test-driven development feels <em>so right</em> that I don’t
think I could ever go back to hacking stuff together without building
the safety net of tests to fall back on as I go. I am sure that my
design is much better than anything I have produced before, and that I
have far fewer bugs than usual, too :) So this experience has been
nothing short of (professional) life-changing. I have read similar stuff
before, but <em>GOOS</em> was the one that finally made me “get it.”</p>
]]></content>
  </entry>
  
</feed>
